# 단순 삽입 정렬의 장점은 살리고 단점은 보완한 알고리즘
# 정렬된 배열의 원소를 그룹으로 나누어서 각 그룹끼리 비교하고, 합치는 방식
# 정렬 횟수는 늘어나지만, 원소의 이동이 줄어 효율적임

# Ex.[8 1 4 2 7 6 3 5 ] 
# 1. (8,7), (1,6), (4,3), (2,5) 4칸 떨어진 원소로 그룹을 나누고 비교함. 이후 합침. (4-정렬)
# 2. (7,3,8,4), (1,2,6,5) 2칸 떨어진 원소로 그룹을 나누고 비교함. 이후 합침(2-정렬) 
# 3. 1-정렬을 적용해 배열을 완성함.
# 셸 정렬 과정에서 사용되는 정렬을 h-정렬 이라고 함. (h값을 4, 2, 1로 감소하면서 정렬함)

def shell_sort(a):
  n = len(a)
  h = n // 2
  while h > 0:
    for i in range(h,n): # h 부터 n까지
      j = i - h          # 0부터 h-1까지
      tmp = a[i]
      while j >= 0 and a[j] > tmp:
        a[j+h] = a[j]    # j+h = i -> h-정렬을 할 때 앞부분을 뒷부분에 대입.
        j -= h           # +h의 간격 차이만큼의 원소를 그룹으로 묶었기 때문에 -h를 해줌.
      a[j + h] = tmp     # 윗 식에서 -h 를 해줬으므로 +h 하면 a[j]가 된다. a[j]에
    h = h//2             # tmp: a[i], 즉 그룹지어 비교했던 뒷부분을 앞부분에 대입